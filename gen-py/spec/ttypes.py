#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class MyException(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MyException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Foo(object):
    """
    Attributes:
     - bar

    """


    def __init__(self, bar=None,):
        self.bar = bar

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.bar = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Foo')
        if self.bar is not None:
            oprot.writeFieldBegin('bar', TType.STRING, 1)
            oprot.writeString(self.bar.encode('utf-8') if sys.version_info[0] == 2 else self.bar)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bar(object):
    """
    Attributes:
     - tbool
     - tbyte
     - tshort
     - tint
     - tlong
     - tdouble
     - tstr
     - tlist_of_strings
     - tmap_of_int2str
     - tsetofints
     - tmap_of_str2foo
     - tmap_of_str2stringlist
     - tmap_of_str2mapofstring2foo
     - tlist_of_foo
     - tfoo
     - tlist_of_maps2int
     - tmap_of_str2foolist
     - tmap_of_int2foo
     - tbinary
     - tmap_of_bool2str
     - tmap_of_bool2int

    """


    def __init__(self, tbool=None, tbyte=None, tshort=None, tint=None, tlong=None, tdouble=None, tstr=None, tlist_of_strings=None, tmap_of_int2str=None, tsetofints=None, tmap_of_str2foo=None, tmap_of_str2stringlist=None, tmap_of_str2mapofstring2foo=None, tlist_of_foo=None, tfoo=None, tlist_of_maps2int=None, tmap_of_str2foolist=None, tmap_of_int2foo=None, tbinary=None, tmap_of_bool2str=None, tmap_of_bool2int=None,):
        self.tbool = tbool
        self.tbyte = tbyte
        self.tshort = tshort
        self.tint = tint
        self.tlong = tlong
        self.tdouble = tdouble
        self.tstr = tstr
        self.tlist_of_strings = tlist_of_strings
        self.tmap_of_int2str = tmap_of_int2str
        self.tsetofints = tsetofints
        self.tmap_of_str2foo = tmap_of_str2foo
        self.tmap_of_str2stringlist = tmap_of_str2stringlist
        self.tmap_of_str2mapofstring2foo = tmap_of_str2mapofstring2foo
        self.tlist_of_foo = tlist_of_foo
        self.tfoo = tfoo
        self.tlist_of_maps2int = tlist_of_maps2int
        self.tmap_of_str2foolist = tmap_of_str2foolist
        self.tmap_of_int2foo = tmap_of_int2foo
        self.tbinary = tbinary
        self.tmap_of_bool2str = tmap_of_bool2str
        self.tmap_of_bool2int = tmap_of_bool2int

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.tbool = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.tbyte = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.tshort = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.tlong = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.tdouble = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.tstr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.tlist_of_strings = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.tlist_of_strings.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.tmap_of_int2str = {}
                    (_ktype7, _vtype8, _size6) = iprot.readMapBegin()
                    for _i10 in range(_size6):
                        _key11 = iprot.readI32()
                        _val12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.tmap_of_int2str[_key11] = _val12
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.SET:
                    self.tsetofints = set()
                    (_etype16, _size13) = iprot.readSetBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readI32()
                        self.tsetofints.add(_elem18)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.tmap_of_str2foo = {}
                    (_ktype20, _vtype21, _size19) = iprot.readMapBegin()
                    for _i23 in range(_size19):
                        _key24 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val25 = Foo()
                        _val25.read(iprot)
                        self.tmap_of_str2foo[_key24] = _val25
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.MAP:
                    self.tmap_of_str2stringlist = {}
                    (_ktype27, _vtype28, _size26) = iprot.readMapBegin()
                    for _i30 in range(_size26):
                        _key31 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val32 = []
                        (_etype36, _size33) = iprot.readListBegin()
                        for _i37 in range(_size33):
                            _elem38 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val32.append(_elem38)
                        iprot.readListEnd()
                        self.tmap_of_str2stringlist[_key31] = _val32
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.MAP:
                    self.tmap_of_str2mapofstring2foo = {}
                    (_ktype40, _vtype41, _size39) = iprot.readMapBegin()
                    for _i43 in range(_size39):
                        _key44 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val45 = {}
                        (_ktype47, _vtype48, _size46) = iprot.readMapBegin()
                        for _i50 in range(_size46):
                            _key51 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val52 = Foo()
                            _val52.read(iprot)
                            _val45[_key51] = _val52
                        iprot.readMapEnd()
                        self.tmap_of_str2mapofstring2foo[_key44] = _val45
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.tlist_of_foo = []
                    (_etype56, _size53) = iprot.readListBegin()
                    for _i57 in range(_size53):
                        _elem58 = Foo()
                        _elem58.read(iprot)
                        self.tlist_of_foo.append(_elem58)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.tfoo = Foo()
                    self.tfoo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.tlist_of_maps2int = []
                    (_etype62, _size59) = iprot.readListBegin()
                    for _i63 in range(_size59):
                        _elem64 = {}
                        (_ktype66, _vtype67, _size65) = iprot.readMapBegin()
                        for _i69 in range(_size65):
                            _key70 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val71 = iprot.readI32()
                            _elem64[_key70] = _val71
                        iprot.readMapEnd()
                        self.tlist_of_maps2int.append(_elem64)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.MAP:
                    self.tmap_of_str2foolist = {}
                    (_ktype73, _vtype74, _size72) = iprot.readMapBegin()
                    for _i76 in range(_size72):
                        _key77 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val78 = []
                        (_etype82, _size79) = iprot.readListBegin()
                        for _i83 in range(_size79):
                            _elem84 = Foo()
                            _elem84.read(iprot)
                            _val78.append(_elem84)
                        iprot.readListEnd()
                        self.tmap_of_str2foolist[_key77] = _val78
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.MAP:
                    self.tmap_of_int2foo = {}
                    (_ktype86, _vtype87, _size85) = iprot.readMapBegin()
                    for _i89 in range(_size85):
                        _key90 = iprot.readI32()
                        _val91 = Foo()
                        _val91.read(iprot)
                        self.tmap_of_int2foo[_key90] = _val91
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.tbinary = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.MAP:
                    self.tmap_of_bool2str = {}
                    (_ktype93, _vtype94, _size92) = iprot.readMapBegin()
                    for _i96 in range(_size92):
                        _key97 = iprot.readBool()
                        _val98 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.tmap_of_bool2str[_key97] = _val98
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.MAP:
                    self.tmap_of_bool2int = {}
                    (_ktype100, _vtype101, _size99) = iprot.readMapBegin()
                    for _i103 in range(_size99):
                        _key104 = iprot.readBool()
                        _val105 = iprot.readI16()
                        self.tmap_of_bool2int[_key104] = _val105
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bar')
        if self.tbool is not None:
            oprot.writeFieldBegin('tbool', TType.BOOL, 1)
            oprot.writeBool(self.tbool)
            oprot.writeFieldEnd()
        if self.tbyte is not None:
            oprot.writeFieldBegin('tbyte', TType.BYTE, 2)
            oprot.writeByte(self.tbyte)
            oprot.writeFieldEnd()
        if self.tshort is not None:
            oprot.writeFieldBegin('tshort', TType.I16, 3)
            oprot.writeI16(self.tshort)
            oprot.writeFieldEnd()
        if self.tint is not None:
            oprot.writeFieldBegin('tint', TType.I32, 4)
            oprot.writeI32(self.tint)
            oprot.writeFieldEnd()
        if self.tlong is not None:
            oprot.writeFieldBegin('tlong', TType.I64, 5)
            oprot.writeI64(self.tlong)
            oprot.writeFieldEnd()
        if self.tdouble is not None:
            oprot.writeFieldBegin('tdouble', TType.DOUBLE, 6)
            oprot.writeDouble(self.tdouble)
            oprot.writeFieldEnd()
        if self.tstr is not None:
            oprot.writeFieldBegin('tstr', TType.STRING, 7)
            oprot.writeString(self.tstr.encode('utf-8') if sys.version_info[0] == 2 else self.tstr)
            oprot.writeFieldEnd()
        if self.tlist_of_strings is not None:
            oprot.writeFieldBegin('tlist_of_strings', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.tlist_of_strings))
            for iter106 in self.tlist_of_strings:
                oprot.writeString(iter106.encode('utf-8') if sys.version_info[0] == 2 else iter106)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tmap_of_int2str is not None:
            oprot.writeFieldBegin('tmap_of_int2str', TType.MAP, 9)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.tmap_of_int2str))
            for kiter107, viter108 in self.tmap_of_int2str.items():
                oprot.writeI32(kiter107)
                oprot.writeString(viter108.encode('utf-8') if sys.version_info[0] == 2 else viter108)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tsetofints is not None:
            oprot.writeFieldBegin('tsetofints', TType.SET, 10)
            oprot.writeSetBegin(TType.I32, len(self.tsetofints))
            for iter109 in self.tsetofints:
                oprot.writeI32(iter109)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.tmap_of_str2foo is not None:
            oprot.writeFieldBegin('tmap_of_str2foo', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.tmap_of_str2foo))
            for kiter110, viter111 in self.tmap_of_str2foo.items():
                oprot.writeString(kiter110.encode('utf-8') if sys.version_info[0] == 2 else kiter110)
                viter111.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tmap_of_str2stringlist is not None:
            oprot.writeFieldBegin('tmap_of_str2stringlist', TType.MAP, 12)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.tmap_of_str2stringlist))
            for kiter112, viter113 in self.tmap_of_str2stringlist.items():
                oprot.writeString(kiter112.encode('utf-8') if sys.version_info[0] == 2 else kiter112)
                oprot.writeListBegin(TType.STRING, len(viter113))
                for iter114 in viter113:
                    oprot.writeString(iter114.encode('utf-8') if sys.version_info[0] == 2 else iter114)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tmap_of_str2mapofstring2foo is not None:
            oprot.writeFieldBegin('tmap_of_str2mapofstring2foo', TType.MAP, 13)
            oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.tmap_of_str2mapofstring2foo))
            for kiter115, viter116 in self.tmap_of_str2mapofstring2foo.items():
                oprot.writeString(kiter115.encode('utf-8') if sys.version_info[0] == 2 else kiter115)
                oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter116))
                for kiter117, viter118 in viter116.items():
                    oprot.writeString(kiter117.encode('utf-8') if sys.version_info[0] == 2 else kiter117)
                    viter118.write(oprot)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tlist_of_foo is not None:
            oprot.writeFieldBegin('tlist_of_foo', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.tlist_of_foo))
            for iter119 in self.tlist_of_foo:
                iter119.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tfoo is not None:
            oprot.writeFieldBegin('tfoo', TType.STRUCT, 15)
            self.tfoo.write(oprot)
            oprot.writeFieldEnd()
        if self.tlist_of_maps2int is not None:
            oprot.writeFieldBegin('tlist_of_maps2int', TType.LIST, 16)
            oprot.writeListBegin(TType.MAP, len(self.tlist_of_maps2int))
            for iter120 in self.tlist_of_maps2int:
                oprot.writeMapBegin(TType.STRING, TType.I32, len(iter120))
                for kiter121, viter122 in iter120.items():
                    oprot.writeString(kiter121.encode('utf-8') if sys.version_info[0] == 2 else kiter121)
                    oprot.writeI32(viter122)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tmap_of_str2foolist is not None:
            oprot.writeFieldBegin('tmap_of_str2foolist', TType.MAP, 17)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.tmap_of_str2foolist))
            for kiter123, viter124 in self.tmap_of_str2foolist.items():
                oprot.writeString(kiter123.encode('utf-8') if sys.version_info[0] == 2 else kiter123)
                oprot.writeListBegin(TType.STRUCT, len(viter124))
                for iter125 in viter124:
                    iter125.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tmap_of_int2foo is not None:
            oprot.writeFieldBegin('tmap_of_int2foo', TType.MAP, 18)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.tmap_of_int2foo))
            for kiter126, viter127 in self.tmap_of_int2foo.items():
                oprot.writeI32(kiter126)
                viter127.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tbinary is not None:
            oprot.writeFieldBegin('tbinary', TType.STRING, 19)
            oprot.writeBinary(self.tbinary)
            oprot.writeFieldEnd()
        if self.tmap_of_bool2str is not None:
            oprot.writeFieldBegin('tmap_of_bool2str', TType.MAP, 20)
            oprot.writeMapBegin(TType.BOOL, TType.STRING, len(self.tmap_of_bool2str))
            for kiter128, viter129 in self.tmap_of_bool2str.items():
                oprot.writeBool(kiter128)
                oprot.writeString(viter129.encode('utf-8') if sys.version_info[0] == 2 else viter129)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tmap_of_bool2int is not None:
            oprot.writeFieldBegin('tmap_of_bool2int', TType.MAP, 21)
            oprot.writeMapBegin(TType.BOOL, TType.I16, len(self.tmap_of_bool2int))
            for kiter130, viter131 in self.tmap_of_bool2int.items():
                oprot.writeBool(kiter130)
                oprot.writeI16(viter131)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(MyException)
MyException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(Foo)
Foo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'bar', 'UTF8', None, ),  # 1
)
all_structs.append(Bar)
Bar.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'tbool', None, None, ),  # 1
    (2, TType.BYTE, 'tbyte', None, None, ),  # 2
    (3, TType.I16, 'tshort', None, None, ),  # 3
    (4, TType.I32, 'tint', None, None, ),  # 4
    (5, TType.I64, 'tlong', None, None, ),  # 5
    (6, TType.DOUBLE, 'tdouble', None, None, ),  # 6
    (7, TType.STRING, 'tstr', 'UTF8', None, ),  # 7
    (8, TType.LIST, 'tlist_of_strings', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.MAP, 'tmap_of_int2str', (TType.I32, None, TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.SET, 'tsetofints', (TType.I32, None, False), None, ),  # 10
    (11, TType.MAP, 'tmap_of_str2foo', (TType.STRING, 'UTF8', TType.STRUCT, [Foo, None], False), None, ),  # 11
    (12, TType.MAP, 'tmap_of_str2stringlist', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 12
    (13, TType.MAP, 'tmap_of_str2mapofstring2foo', (TType.STRING, 'UTF8', TType.MAP, (TType.STRING, 'UTF8', TType.STRUCT, [Foo, None], False), False), None, ),  # 13
    (14, TType.LIST, 'tlist_of_foo', (TType.STRUCT, [Foo, None], False), None, ),  # 14
    (15, TType.STRUCT, 'tfoo', [Foo, None], None, ),  # 15
    (16, TType.LIST, 'tlist_of_maps2int', (TType.MAP, (TType.STRING, 'UTF8', TType.I32, None, False), False), None, ),  # 16
    (17, TType.MAP, 'tmap_of_str2foolist', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, [Foo, None], False), False), None, ),  # 17
    (18, TType.MAP, 'tmap_of_int2foo', (TType.I32, None, TType.STRUCT, [Foo, None], False), None, ),  # 18
    (19, TType.STRING, 'tbinary', 'BINARY', None, ),  # 19
    (20, TType.MAP, 'tmap_of_bool2str', (TType.BOOL, None, TType.STRING, 'UTF8', False), None, ),  # 20
    (21, TType.MAP, 'tmap_of_bool2int', (TType.BOOL, None, TType.I16, None, False), None, ),  # 21
)
fix_spec(all_structs)
del all_structs
